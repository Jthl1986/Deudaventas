import pandas as pd
import streamlit as st
import numpy as np
from io import StringIO
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

st.set_page_config(page_title="Deuda - Ventas", page_icon="游늳")

url = "https://raw.githubusercontent.com/Jthl1986/T1/main/iipcSep24.csv"
df = pd.read_csv(url, encoding='ISO-8859-1', sep=',')

# Ocultar fuente GitHub
hide_github_link = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
"""
st.markdown(hide_github_link, unsafe_allow_html=True)

def col_letter_to_index(letter):
    """Convertir una letra de columna de Excel a un 칤ndice de columna de Pandas (0-based)."""
    index = 0
    for char in letter.upper():
        index = index * 26 + (ord(char) - ord('A')) + 1
    return index - 1

    # Ajustar los l칤mites del eje y
    ax1.set_ylim(0, max(df_merged['Deuda'].max()) * 1.1)

    plt.title('Deuda por Mes a valores constantes', fontsize=16)

    # Corregir la leyenda para mostrar solo una barra
    handles, labels = ax1.get_legend_handles_labels()
    bar = plt.Rectangle((0,0),1,1,fc="green", edgecolor='black')
    ax1.legend([bar], ['Deuda'], loc='upper left')

    # Mejorar la est칠tica general del gr치fico
    sns.despine(left=True, bottom=True)

    return st.pyplot(fig)

def graficobar(df_final):
    def millions(x, pos):
        'The two args are the value and tick position'
        return '%1.0fM' % (x * 1e-6)
    # Convertir las fechas a formato datetime
    df_final['fecha'] = pd.to_datetime(df_final['fecha'], format='%m/%Y')

    # Extraer el mes y el a침o de la columna de fecha
    df_final['Mes'] = df_final['fecha'].dt.strftime('%B')
    df_final['A침o'] = df_final['fecha'].dt.year

    # Crear un DataFrame con las ventas del a침o actual y del a침o anterior
    df_ventas = df_final[['Mes', 'A침o', 'Ventas']]

    # Definir el orden cronol칩gico de los meses
    meses_ordenados = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ]

    # Convertir la columna 'Mes' a un tipo de datos categ칩rico con el orden especificado
    df_ventas['Mes'] = pd.Categorical(df_ventas['Mes'], categories=meses_ordenados, ordered=True)

    # Pivotar la tabla para tener a침os como columnas y meses como filas
    df_pivot = df_ventas.pivot(index='Mes', columns='A침o', values='Ventas')

    # Filtrar solo los a침os disponibles para la comparaci칩n
    years = df_pivot.columns[-2:]

    # Crear un nuevo DataFrame para la comparaci칩n
    df_comparison = df_pivot[years].dropna()

    # Resetear el 칤ndice para que Mes sea una columna
    df_comparison.reset_index(inplace=True)

    # Plotear los datos
    fig, ax = plt.subplots(figsize=(12, 8))
    df_comparison.set_index('Mes').plot(kind='bar', ax=ax)
    ax.set_title('Comparaci칩n de Ventas por Mes (A침o Actual vs A침o Anterior)')
    ax.set_xlabel('Mes')
    ax.set_ylabel('Ventas')
    ax.set_xticklabels(df_comparison['Mes'], rotation=45)
    ax.yaxis.set_major_formatter(FuncFormatter(millions))
    ax.legend(title='A침o')
    return st.pyplot(fig)

def grafico(df_final):
    # Funci칩n para formatear los n칰meros grandes
    def millions(x, pos):
        'The two args are the value and tick position'
        return '%1.0fM' % (x * 1e-6)

    # Aplicar estilo
    sns.set_style("whitegrid")

    # Crear la figura y el eje
    fig, ax1 = plt.subplots(figsize=(14, 8))

    # Graficar la deuda como barras
    barplot = sns.barplot(x='Mes', y='Deuda', data=df_final, palette='Greens_d', ax=ax1, edgecolor='black', alpha=0.8)

    # Agregar contornos a las barras
    for bar in barplot.patches:
        bar.set_edgecolor('black')

    # Graficar las ventas como l칤nea en el mismo eje, usando plt.plot para manejar discontinuidades
    ax1.plot(df_final['Mes'], df_final['Ventas'], color='r', marker='o', markersize=10, linewidth=2.5, linestyle='-', drawstyle='default')

    # Etiquetas y leyendas
    ax1.set_ylabel('Deuda y Ventas (en millones)', color='k')
    ax1.tick_params(axis='y', labelcolor='k')
    ax1.set_xticklabels(df_final['Mes'], rotation=90)
    ax1.yaxis.set_major_formatter(FuncFormatter(millions))

    # Ajustar los l칤mites del eje y
    ax1.set_ylim(0, max(df_final['Deuda'].max(), df_final['Ventas'].max(skipna=True)) * 1.1)

    plt.title('Deuda y Ventas por Mes a valores constantes', fontsize=16)

    # Corregir la leyenda para mostrar solo una l칤nea y una barra
    handles, labels = ax1.get_legend_handles_labels()
    line = plt.Line2D([0], [0], color='r', lw=2.5, marker='o', markersize=10)
    bar = plt.Rectangle((0,0),1,1,fc="green", edgecolor='black')
    ax1.legend([line, bar], ['Ventas', 'Deuda'], loc='upper left')

    # Mejorar la est칠tica general del gr치fico
    sns.despine(left=True, bottom=True)

    return st.pyplot(fig)

def graficomm(df_final):
    # Funci칩n para formatear los n칰meros grandes
    def millions(x, pos):
        'The two args are the value and tick position'
        return '%1.0fM' % (x * 1e-6)

    # Aplicar estilo
    sns.set_style("whitegrid")

    # Crear la figura y el eje
    fig, ax1 = plt.subplots(figsize=(14, 8))

    # Graficar la deuda como barras
    barplot = sns.barplot(x='Mes', y='Deuda', data=df_final, palette='Greens_d', ax=ax1, edgecolor='black', alpha=0.8)

    # Agregar contornos a las barras
    for bar in barplot.patches:
        bar.set_edgecolor('black')

    # Calcular la media m칩vil de las ventas para suavizar la l칤nea
    df_final['Ventas_suavizadas'] = df_final['Ventas'].rolling(window=3).mean()

    # Graficar las ventas suavizadas como l칤nea en el mismo eje
    ax1.plot(df_final['Mes'], df_final['Ventas_suavizadas'], color='r', marker='o', markersize=10, linewidth=2.5, linestyle='-', drawstyle='default')

    # Etiquetas y leyendas
    ax1.set_ylabel('Deuda y Ventas (en millones)', color='k')
    ax1.tick_params(axis='y', labelcolor='k')
    ax1.set_xticklabels(df_final['Mes'], rotation=90)
    ax1.yaxis.set_major_formatter(FuncFormatter(millions))

    # Ajustar los l칤mites del eje y
    ax1.set_ylim(0, max(df_final['Deuda'].max(), df_final['Ventas'].max(skipna=True)) * 1.1)

    plt.title('Deuda y Ventas en $ (Media Movil SMA3)', fontsize=16)

    # Corregir la leyenda para mostrar solo una l칤nea y una barra
    handles, labels = ax1.get_legend_handles_labels()
    line = plt.Line2D([0], [0], color='r', lw=2.5, marker='o', markersize=10)
    bar = plt.Rectangle((0,0),1,1,fc="green", edgecolor='black')
    ax1.legend([line, bar], ['Ventas', 'Deuda'], loc='upper left')

    # Mejorar la est칠tica general del gr치fico
    sns.despine(left=True, bottom=True)

    return st.pyplot(fig)

def graficodol(df_final):
    # Funci칩n para formatear los n칰meros grandes
    def millions(x, pos):
        'The two args are the value and tick position'
        return '%1.0fM' % (x * 1e-6)

    # Aplicar estilo
    sns.set_style("whitegrid")

    # Crear la figura y el eje
    fig, ax1 = plt.subplots(figsize=(14, 8))

    # Graficar la deuda como barras
    barplot = sns.barplot(x='Mes', y='Dolar', data=df_final, palette='Greens_d', ax=ax1, edgecolor='black', alpha=0.8)

    # Agregar contornos a las barras
    for bar in barplot.patches:
        bar.set_edgecolor('black')

    # Calcular la media m칩vil de las ventas para suavizar la l칤nea
    df_final['Ventas_suavizadasdol'] = df_final['dolares'].rolling(window=3).mean()

    # Graficar las ventas suavizadas como l칤nea en el mismo eje
    ax1.plot(df_final['Mes'], df_final['Ventas_suavizadasdol'], color='r', marker='o', markersize=10, linewidth=2.5, linestyle='-', drawstyle='default')

    # Etiquetas y leyendas
    ax1.set_ylabel('Deuda y Ventas (en millones)', color='k')
    ax1.tick_params(axis='y', labelcolor='k')
    ax1.set_xticklabels(df_final['Mes'], rotation=90)
    ax1.yaxis.set_major_formatter(FuncFormatter(millions))

    # Ajustar los l칤mites del eje y
    ax1.set_ylim(0, max(df_final['Dolar'].max(), df_final['dolares'].max(skipna=True)) * 1.1)

    plt.title('Deuda y Ventas en u$s (Media Movil SMA3)', fontsize=16)

    # Corregir la leyenda para mostrar solo una l칤nea y una barra
    handles, labels = ax1.get_legend_handles_labels()
    line = plt.Line2D([0], [0], color='r', lw=2.5, marker='o', markersize=10)
    bar = plt.Rectangle((0,0),1,1,fc="green", edgecolor='black')
    ax1.legend([line, bar], ['Venta en u$s', 'Deuda en u$s'], loc='upper left')

    # Mejorar la est칠tica general del gr치fico
    sns.despine(left=True, bottom=True)

    return st.pyplot(fig)

def process_file(file):
    df_excel = pd.read_excel(file, header=None, engine='xlrd')
    celdas_totales = ['E4', 'K4', 'Q4', 'W4', 'AC4', 'AI4', 'AO4', 'AU4', 'BA4', 'BG4', 'BM4', 'BS4', 'BY4', 'CE4', 'CK4', 'CQ4', 'CW4', 'DC4', 'DI4', 'DO4', 'DU4', 'EA4', 'EG4']
    celdas_indices = [(int(''.join(filter(str.isdigit, cell))) - 1, col_letter_to_index(''.join(filter(str.isalpha, cell)))) for cell in celdas_totales]
    totales = [df_excel.iat[row, col] if pd.notna(df_excel.iat[row, col]) else 0 for row, col in celdas_indices]
    meses = df_excel.iloc[1, 3:].dropna().values
    min_length = min(len(meses), len(totales))
    meses = meses[:min_length]
    totales = totales[:min_length]
    df_result = pd.DataFrame({'Mes': meses, 'Nosis': totales})
    df_merged = df.merge(df_result, on='Mes', how='inner')
    df_merged['Nosis'] = df_merged['Nosis'].astype(float)
    df_merged['Deuda'] = (df_merged['iipc'] * df_merged['Nosis']).round(0).astype(float)
    df_merged['Dolar'] = (df_merged['Nosis'] / df_merged['dolar']).round(0).astype(float)
    return df_merged

def process_text_input(text_input):
    data = StringIO(text_input)
    df_text = pd.read_csv(data, sep='\t')
    subset_df = df_text.iloc[0:12].copy()

    # Reemplazar 'S/D' por NaN y convertir los valores
    for year in ['2020', '2021', '2022', '2023', '2024']:
        # Verificar si toda la columna contiene 'S/D'
        if (subset_df[year] == 'S/D').all():
            subset_df.at[0, year] = '0'  # Poner un 0 en el primer mes (enero)
        else:
            subset_df[year].replace('S/D', np.nan, inplace=True)
        
        # Reemplazar valores restantes y convertir a float y luego a Int64
        subset_df[year].replace('S/D', np.nan, inplace=True)
        subset_df[year] = subset_df[year].str.replace(',', '', regex=False).astype(float).astype('Int64')

    # Lista para almacenar los registros
    ventas_records = []

    # Nombres de meses
    meses = subset_df['Mes'].tolist()

    # Extraer las ventas y agregar a la lista
    for i, mes in enumerate(meses):
        for year in ['2020', '2021', '2022', '2023', '2024']:
            if not pd.isnull(subset_df[year].iloc[i]):
                ventas_records.append([f"{mes.capitalize()} - {year}", subset_df[year].iloc[i]])

    # Crear DataFrame a partir de la lista de registros
    df_ventas = pd.DataFrame(ventas_records, columns=['Mes', 'Ventas'])

    return df_ventas

pd.set_option('display.float_format', lambda x: '%.0f' % x)

def main():
    st.write("<h1 style='text-align: center;'>Deuda游늵 vs 游늳Ventas</h1>", unsafe_allow_html=True)
    st.markdown(
    "<p style='text-align: center;'><small>Desarrollado por JSantacecilia - JSaborido - Equipo Agro</small></p>",
    unsafe_allow_html=True
)

    uploaded_file = st.file_uploader("Sube archivo DEUDA", type=["xls", "xlsx"])
    
    df_merged = None
    if uploaded_file is not None:
        df_merged = process_file(uploaded_file)
        
    
    text_input = st.text_area("Pega aqu칤 EVOLUCI칍N DE VENTAS")

    if text_input:
        try:
            df_ventas = process_text_input(text_input)
            if df_merged is not None:
                df_ventas['Mes'] = df_ventas['Mes'].apply(lambda x: x.split(' - ')[0])  # Ajustar si es necesario
                df_final = df_merged.merge(process_text_input(text_input), on='Mes', how='left')
                df_final['dolares'] = (df_final['Ventas'] / df_final['iipc']) / df_final['dolar']
                df_selected_columns = df_final[['Mes', 'ipc', 'dolar', 'Deuda', 'Ventas']]
                grafico(df_final)
                graficomm(df_final)
                graficodol(df_final)
                graficobar(df_final)
                with st.expander("Tabla de control"):
                    st.dataframe(df_selected_columns, use_container_width=True)
                    #st.table(df_final)
            else:
                st.dataframe(df_ventas)
        except Exception as e:
            st.error(f"Error procesando los datos: {e}")


    with st.expander("Metodolog칤a utilizada"):
        st.write("Para la deuda a valores constantes se multiplica deuda hist칩rica de Nosis por Indices IPC Cobertura Nacional suministrado por INDEC, ultimo informe Julio 2024. Para deuda en d칩lares se divide deuda hist칩rica de Nosis por dolar mayorista cotizaci칩n del 칰ltimo d칤a h치bil del mes")
        st.write("Para las ventas se utiliza las generadas por Pitagorias ajustadas. En el caso de la SMA3 se utilizan medias m칩viles (el valor graficado es el resultado del promedio entre el valor de dicho mes y el de los dos meses anteriores)")
        st.write("Utilizar una media m칩vil de ventana 3 al graficar ventas es beneficioso porque suaviza las fluctuaciones y reduce el ruido, lo que permite identificar tendencias subyacentes de manera m치s clara y precisa. Esto facilita la interpretaci칩n y comparaci칩n de datos, ayudando a detectar cambios recientes en las ventas y picos o valles significativos.")
if __name__ == "__main__":
    main()
